#Nome Francisco Gabriel Cidrao Costa
#Matricula 2024012995
# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R6LkVP7t9zPzN96KCIPOUJ8IUh4_PWrb
"""

!pip install fpdf python-docx PyPDF2

from fpdf import FPDF
from docx import Document

pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)

numeros = [23, 45.5, 12, 67, 34]
for numero in numeros:
    pdf.cell(200, 10, txt=str(numero), ln=True)

pdf.output("/content/dados.pdf")

doc = Document()
for numero in numeros:
    doc.add_paragraph(str(numero))

doc.save("/content/dados.docx")

import os
import statistics
from PyPDF2 import PdfReader
from docx import Document

def verificar_arquivo(diretorio, nome_arquivo):
    caminho_arquivo = os.path.join(diretorio, nome_arquivo)
    return os.path.exists(caminho_arquivo)

def ler_pdf(caminho_arquivo):
    try:
        reader = PdfReader(caminho_arquivo)
        texto = ""
        for pagina in reader.pages:
            texto += pagina.extract_text() + "\n"
        return texto
    except Exception as e:
        print(f"Erro ao ler o arquivo PDF: {e}")
        return ""

def ler_docx(caminho_arquivo):
    try:
        doc = Document(caminho_arquivo)
        texto = ""
        for paragrafo in doc.paragraphs:
            texto += paragrafo.text + "\n"
        return texto
    except Exception as e:
        print(f"Erro ao ler o arquivo DOCX: {e}")
        return ""

def extrair_numeros(texto):
    linhas = texto.split("\n")
    numeros = []
    for linha in linhas:
        try:
            numero = float(linha.strip())
            numeros.append(numero)
        except ValueError:
            continue
    return numeros

def calcular_estatisticas(numeros):
    if not numeros:
        print("Nenhum número válido foi encontrado.")
        return

    soma = sum(numeros)
    media = statistics.mean(numeros)
    mediana = statistics.median(numeros)
    maior = max(numeros)
    menor = min(numeros)

    print(f"Soma: {soma}")
    print(f"Média: {media}")
    print(f"Mediana: {mediana}")
    print(f"Maior valor: {maior}")
    print(f"Menor valor: {menor}")

def main():
    diretorio = "/content"
    nome_arquivo = "dados"

    arquivos_possiveis = [nome_arquivo + ".pdf", nome_arquivo + ".docx"]
    arquivo_encontrado = None

    for arquivo in arquivos_possiveis:
        if verificar_arquivo(diretorio, arquivo):
            arquivo_encontrado = arquivo
            break

    if arquivo_encontrado is None:
        print("Arquivo não encontrado.")
        return

    caminho_arquivo = os.path.join(diretorio, arquivo_encontrado)

    if arquivo_encontrado.endswith(".pdf"):
        texto = ler_pdf(caminho_arquivo)
    elif arquivo_encontrado.endswith(".docx"):
        texto = ler_docx(caminho_arquivo)

    numeros = extrair_numeros(texto)

    calcular_estatisticas(numeros)

if __name__ == "__main__":
    main()
